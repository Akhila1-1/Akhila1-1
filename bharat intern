!pip install tensorflow pandas numpy matplotlib
# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

# Load stock price data (You can use Yahoo Finance or any other source to get the data)
# Example data for Apple Inc. (AAPL)
url = "https://query1.finance.yahoo.com/v7/finance/download/AAPL?period1=0&period2=9999999999&interval=1d&events=history"
data = pd.read_csv(url)

# Use only the 'Close' price for prediction
data = data['Close'].values.reshape(-1, 1)

# Scale the data to a range between 0 and 1
scaler = MinMaxScaler()
data = scaler.fit_transform(data)

# Split the data into training and testing sets
train_size = int(len(data) * 0.80)
train_data, test_data = data[:train_size], data[train_size:]

# Function to create time series data
def create_dataset(data, time_steps=1):
    X, Y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:(i + time_steps), 0])
        Y.append(data[i + time_steps, 0])
    return np.array(X), np.array(Y)

# Set the number of time steps
time_steps = 10

X_train, y_train = create_dataset(train_data, time_steps)
X_test, y_test = create_dataset(test_data, time_steps)

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, activation='relu', return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32)

# Predict the stock prices on the test data
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)

# Plot the results
plt.figure(figsize=(16,8))
plt.title('Stock Price Prediction')
plt.plot(range(len(y_train), len(y_train) + len(predicted_prices)), y_test, label='Actual Price', color='b')
plt.plot(range(len(y_train), len(y_train) + len(predicted_prices)), predicted_prices, label='Predicted Price', color='r')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
